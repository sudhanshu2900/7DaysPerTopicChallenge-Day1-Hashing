PROBLEM: CodeMart is a shopping platform and it is distributing gift vouchers to its esteemed users. The voucher can be redeemed by 
         providing a fixed amount of shopping credits to the platform. One credit is sent by a user to the platform by doing one occurance 
         in CodeMart. Since there is a huge rush of people you are required to manage the users on the basis of first come first serve. 
         The user which came first and has exactly k occurrences at last is given the voucher first. You are given an array arr[ ] with the 
         id's of N users in chronological order of their occurances . You are required to print the id of the user which will be given the 
         voucher first. If no such user meets the condition print "-1".


Input: N = 7 
       K = 2
       arr[] = {1, 7, 4, 3, 4, 8, 7} 
Output: 7

Explanation: Both 7 and 4 occur 2 times. But 7 is the first that occurs 2 times.  

__________________________________________

Input: N = 6 
       K = 1 
       arr[] = {4, 1, 6, 1, 6, 4} 
Output: -1 

Explanation: No one occurs exactly 1 time.


SOLUTION:

int firstElement(int arr[], int n, int k)
    {
        unordered_map<int , int> occ;
        unordered_set<int> s;
        for (int i = 0; i < n; i++) 
            occ[arr[i]]++;
        for (auto i: occ){
            if(k == (i.second)){
                s.insert(i.first);
            }
        }
        if(s.size()>0){
            for(int i=0;i<n;i++){
                if(s.find(arr[i])!=s.end()){
                    return arr[i];
                    break;
                }
            }
        }
        else
            return -1;
    }
    
    
    
    
    
    
